package views

import (
    "fmt"
    "strconv"
	"github.com/mrcunninghamz/tprkpr/platform/data/models"
	"github.com/gofrs/uuid"
)

templ TabGroup(){
    <script type="module" src="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.14.0/cdn/components/tab-group/tab-group.js"></script>
    <script type="module" src="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.14.0/cdn/components/spinner/spinner.js"></script>
    <script src="https://unpkg.com/htmx.org@1.9.11/dist/ext/json-enc.js"></script>
    <sl-tab-group placement="start">
    <sl-tab slot="nav" panel="general">General</sl-tab>
	<sl-tab slot="nav" panel="paydays" hx-get="/api/paydays" hx-target="#paydays" hx-swap="innerHTML">PayDays</sl-tab>
	<sl-tab slot="nav" panel="bills">Bills</sl-tab>

	<sl-tab-panel name="general">This is gonna have the page where we figure out our bills for the month</sl-tab-panel>
	<sl-tab-panel name="paydays" id="paydays"><sl-spinner style="font-size: 50px; --track-width: 10px;"></sl-spinner></sl-tab-panel>
	<sl-tab-panel name="bills">This is going to show the bills we have.</sl-tab-panel>
</sl-tab-group>
}

templ PayDays(data []models.Payday){
    <sl-button variant="primary" hx-get="/api/payday/new" hx-target="#divider" hx-swap="afterend" hx-trigger="click">New Payday</sl-button>
    <sl-divider id="divider"></sl-divider>
	for _, item := range data {
		@PaydayCard(item)
	}
}

templ PaydayCard(item models.Payday){
    <sl-card class="card-overview">
            <div slot="header" id={fmt.Sprintf("%s%s", "payday-", item.ID)}>
                Payday on day { strconv.Itoa(item.PayDateOfMonth) } of the month.
                <sl-tooltip content="Add a bill">
                    <sl-icon-button name="plus-circle" label="Add a bill" hx-get={fmt.Sprintf("%s%s", "/api/bill/new/", item.ID)} hx-target={fmt.Sprintf("#%s%s", "payday-", item.ID)} hx-swap="afterend" hx-trigger="click"></sl-icon-button>
                </sl-tooltip>
            </div>
		for _, bill := range item.Bills {
			@BillDetail(&bill, false)
    	}
            <div slot="footer">
                <sl-icon-button name="gear" label="Settings"></sl-icon-button>
            </div>
		</sl-card>
}

templ BillDetail(bill *models.Bill, isOpen bool){
    <sl-details summary={bill.Name} id={fmt.Sprintf("%s%s", "bill-detail-", bill.ID)} open={isTrue(isOpen)}>
         <div>
            Due Date: { strconv.Itoa(bill.DueDateOfMonth) } <br/>
            Amount: { bill.Amount.String() }
        </div>
        <sl-button variant="text" size="small" hx-get={fmt.Sprintf("%s%s", "/api/bill/edit/", bill.ID)} hx-target={fmt.Sprintf("#%s%s", "bill-detail-", bill.ID)} hx-swap="outerHTML" hx-trigger="click">Edit</sl-button>
    </sl-details>
}

templ BillForm(data *models.Bill) {
	<sl-details summary={data.Name} id={fmt.Sprintf("%s%s", "bill-detail-", data.ID)} open>
    	<form 
            hx-post={checkIdForBillActionUrl(data.ID, data.PaydayId)} 
            hx-ext="json-enc" 
            hx-target={fmt.Sprintf("#%s%s", "bill-detail-", data.ID)}
            hx-swap="outerHTML"
            hx-trigger="submit">
    		<sl-input id="name" name="name" label="Name" value={data.Name} pill></sl-input>
    		<sl-input id="amount" name="amount" label="Amount" value={data.Amount.String()}></sl-input>
    		<sl-input id="due_date_of_month" name="due_date_of_month" label="Due Date" value={strconv.Itoa(data.DueDateOfMonth)} type="number"></sl-input>
            <sl-visually-hidden>
    		    <sl-input id="payday_id" name="payday_id" value={data.PaydayId.String()}></sl-input>
            </sl-visually-hidden>
    		<sl-button type="submit" pill>Submit</sl-button>

            if uuid.UUID.IsNil(data.ID) {
                <sl-button variant="text" size="small" hx-delete="/api/empty" hx-target={fmt.Sprintf("#%s%s", "bill-detail-", data.ID)} hx-trigger="click">Cancel</sl-button>
            }
            else {
                <sl-button variant="text" size="small" hx-get={fmt.Sprintf("%s%s", "/api/bill/", data.ID)} hx-target={fmt.Sprintf("#%s%s", "bill-detail-", data.ID)} hx-swap="outerHTML" hx-trigger="click">Cancel</sl-button>
            }
            
    	</form>
    </sl-details>
}

templ PaydayForm(data *models.Payday) {
	<sl-card class="card-overview" id={fmt.Sprintf("%s%s", "payday-overview-", data.ID)}>
    	<form 
            hx-post={checkIdForPaydayActionUrl(data.ID)} 
            hx-ext="json-enc" 
            hx-target={fmt.Sprintf("#%s%s", "payday-overview-", data.ID)}
            hx-swap="outerHTML"
            hx-trigger="submit">
    		<sl-input id="pay_date_of_month" name="pay_date_of_month" label="Pay Date of Month" value={strconv.Itoa(data.PayDateOfMonth)} type="number" pill></sl-input>
    		<sl-button type="submit" pill>Submit</sl-button>

            if uuid.UUID.IsNil(data.ID) {
                <sl-button variant="text" size="small" hx-delete="/api/empty" hx-target={fmt.Sprintf("#%s%s", "payday-overview-", data.ID)} hx-trigger="click">Cancel</sl-button>
            }
            else {
                <sl-button variant="text" size="small" hx-get={fmt.Sprintf("%s%s", "/api/payday/", data.ID)} hx-target={fmt.Sprintf("#%s%s", "payday-overview-", data.ID)} hx-swap="outerHTML" hx-trigger="click">Cancel</sl-button>
            }
            
    	</form>
    </sl-card>
}

templ Empty(){
}


func checkIdForBillActionUrl(billId uuid.UUID, payDayId uuid.UUID) string {
    if uuid.UUID.IsNil(billId){
        return fmt.Sprintf("/api/payday/%s/bill", payDayId)
    }
    
    return fmt.Sprintf("%s%s", "/api/bill/", billId)
    
}

func checkIdForPaydayActionUrl(payDayId uuid.UUID) string {
    if uuid.UUID.IsNil(payDayId){
        return "/api/payday"
    }
    
    return fmt.Sprintf("%s%s", "/api/payday/", payDayId)
    
}

func isTrue(condition bool) string {
    if condition {
        return "true"
    }

    return "false"
}